function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReciept",{templateUrl:"app/marketReciept/marketReciept.htm",controller:"marketRecieptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReciept")}]}}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function backendSrvc(e,t){function a(e){return new Promise(function(a,n){t({method:"GET",url:"assets/"+e}).then(function(e){a(e.data)},function(e){console.log("Error:",e)})})}function n(a){return e.info("got this in _post",a),new Promise(function(e,n){var s=t.post("forms/marketReciept",a).then(function(t){e("success")},function(t){e("error")});console.log(s)})}function s(e){var t=this;t.allForms={marketReciept:"marketReciept.json"};var a=t.allForms[e];return new Promise(function(n,s){"undefined"!=typeof t[e]?n(t[e]):t._get(a).then(function(a){t[e]=a,n(t[e])})})}function o(){var e=this;e.allForms={marketReciept:"marketReciept.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var a=e.allForms[t];e._get(a).then(function(a){e[t]=a.data})})}function r(t){var a=this;e.info("got this",t),a._post(t).then(function(e){console.log("response:",e)})}var i={_get:a,_post:n,getFormData:s,loadAllForms:o,submitFormData:r};return i}function recieptForm(){function e(e,t,a,n){}function t(e,t,a){function n(){i.submitBtnClasses["btn-danger"]=!1,i.submitBtnClasses["btn-success"]=!0}function s(){i.submitBtnClasses["btn-danger"]=!0,i.submitBtnClasses["btn-success"]=!1}function o(){var e=0;return Object.keys(i.data.questions).forEach(function(t){var a=i.data.questions[t].approvals.addressed;a&&e++}),e==l?n():s(),e}function r(){var e=document.getElementById("recieptImage"),t=document.getElementById("Photo").files[0],a=new FileReader,n=null;a.addEventListener("load",function(){n=a.result,e.src=n},!1),t&&(a.readAsDataURL(t),i.inputs.Photo={src:"Market_Reciept.jpg",binary:n})}var i=this,l=0,c={};i.currentDate=new Date,i.uploadedImage={src:"Market_Image.jpg",binary:null},i.inputs={},i.approvals={},i.submitBtnClasses={btn:!0,"btn-danger":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"col-lg-12":!0},Object.keys(i.data.questions).forEach(function(e){var t=i.data.questions[e].name;i.approvals[t]={addressed:!1,value:null,text:"OK?"},i.inputs[t]={},i.inputs[t].value="",i.inputs[t].suggestion="415",c[t]=l,l++}),i.inputs.Market.suggestion="Surf City",i.inputs.Name.suggestion="Ahmed",i.inputs.Gross.suggestion=415,i.inputs.Fee.suggestion=42,i.inputs.Pay.suggestion=83,i.inputs.Reciepts.suggestion=10,i.inputs.Bank.suggestion=60,i.inputs.Due.suggestion=220,i.inputs.Photo.suggestion="",i.refreshApprovals=function(){Object.keys(i.data.questions).forEach(function(e){var t=i.data.questions[e].name;i.inputs[t].value="",i.data.questions[e].approvals.addressed=!1,i.data.questions[e].approvals.value=null,i.data.questions[e].approvals.text="OK?",i.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,i.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,i.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1,i.data.questions[e].classes.inputDiv["has-success"]=!1,i.data.questions[e].classes.inputDiv["has-warning"]=!1,i.data.questions[e].classes.inputDiv["has-danger"]=!1}),o()},i.changed=function(e){var t=c[e];i.data.questions[t].approvals.addressed=!0,i.data.questions[t].approvals.value=!0,i.data.questions[t].approvals.text="NO!",i.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,i.data.questions[t].classes.approvalDiv["round-button-circle-revised"]=!0,i.data.questions[t].classes.inputDiv["has-danger"]=!0,o()},i.approveField=function(e){var t=c[e],a=i.data.questions[t].approvals.addressed;a||(i.inputs[e].value=i.inputs[e].suggestion,i.data.questions[t].approvals.addressed=!0,i.data.questions[t].approvals.value=!0,i.data.questions[t].approvals.text="YES!",i.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,i.data.questions[t].classes.approvalDiv["round-button-circle-approved"]=!0,i.data.questions[t].classes.inputDiv["has-success"]=!0,o())},e.photoAdded=function(){var a=c.Photo;r(),t.info(i.inputs.Photo),i.data.questions[a].approvals.addressed=!0,i.data.questions[a].approvals.value=!0,i.data.questions[a].classes.inputDiv["has-success"]=!0,o(),e.$apply()},i.submitForm=function(){if(o()==l){var e={};Object.keys(i.inputs).forEach(function(t){"Photo"!==t?"number"==typeof i.inputs[t].value?e[t]=100*i.inputs[t].value:e[t]=i.inputs[t].value:e[t]=i.inputs[t]}),a.submitFormData(e),console.log("submitted!")}else console.log("need to finish the fields")}}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendSrvc"],a}function landingController(e,t){var a=this;a.redirectTo=function(a){e.info("clicked",a),t.path("/"+a)}}function navbar(){function e(e,t,a,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}function marketRecieptController(e,t,a){var n=this;n.data=a}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReciept",["ngRoute"]),angular.module("marketReciept").config(config),angular.module("marketReciept").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReciept").directive("recieptForm",recieptForm),angular.module("marketReciept").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReciept").directive("navbar",navbar),angular.module("marketReciept").controller("marketRecieptController",marketRecieptController),marketRecieptController.$inject=["$log","backendSrvc","formData"];
//# sourceMappingURL=data:application/json;base64,
