function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReceipt",{templateUrl:"app/marketReceipt/marketReceipt.htm",controller:"marketReceiptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReceipt")}]}}).when("/success",{templateUrl:"app/success/success.htm",controller:"successController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function recieptForm(){function e(e,t,n,a){}function t(e,t,n,a){function s(){c.submitBtnClasses["btn-danger"]=!1,c.submitBtnClasses["btn-success"]=!0}function o(){c.submitBtnClasses["btn-danger"]=!0,c.submitBtnClasses["btn-success"]=!1}function r(){var e=0;return Object.keys(c.data.questions).forEach(function(t){var n=c.data.questions[t].approvals.addressed;n&&e++}),e==l?s():o(),e}function i(){var e=document.getElementById("recieptImage"),t=document.getElementById("Photo").files[0],n=new FileReader,a=null;n.addEventListener("load",function(){a=n.result,e.src=a},!1),t&&(n.readAsDataURL(t),c.inputs.Photo={src:"Market_Reciept.jpg",binary:a})}var c=this,l=0,u={};c.currentDate=new Date,c.uploadedImage={src:"Market_Image.jpg",binary:null},c.inputs={},c.approvals={},c.submitBtnClasses={btn:!0,"btn-danger":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"col-lg-12":!0},Object.keys(c.data.questions).forEach(function(e){var t=c.data.questions[e].name;c.approvals[t]={addressed:!1,value:null,text:"OK?"},c.inputs[t]={},c.inputs[t].value="",c.inputs[t].suggestion="415",u[t]=l,l++}),c.inputs.Market.suggestion="Surf City",c.inputs.Name.suggestion="Ahmed",c.inputs.Gross.suggestion=415,c.inputs.Fee.suggestion=42,c.inputs.Pay.suggestion=83,c.inputs.Reciepts.suggestion=10,c.inputs.Bank.suggestion=60,c.inputs.Due.suggestion=220,c.refreshApprovals=function(){Object.keys(c.data.questions).forEach(function(e){var t=c.data.questions[e].name;c.inputs[t].value="",c.data.questions[e].approvals.addressed=!1,c.data.questions[e].approvals.value=null,c.data.questions[e].approvals.text="OK?",c.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,c.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,c.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1,c.data.questions[e].classes.inputDiv["has-success"]=!1,c.data.questions[e].classes.inputDiv["has-warning"]=!1,c.data.questions[e].classes.inputDiv["has-danger"]=!1}),r()},c.changed=function(e){var t=u[e];c.data.questions[t].approvals.addressed=!0,c.data.questions[t].approvals.value=!0,c.data.questions[t].approvals.text="NO!",c.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,c.data.questions[t].classes.approvalDiv["round-button-circle-revised"]=!0,c.data.questions[t].classes.inputDiv["has-danger"]=!0,r()},c.approveField=function(e){var t=u[e],n=c.data.questions[t].approvals.addressed;n||(c.inputs[e].value=c.inputs[e].suggestion,c.data.questions[t].approvals.addressed=!0,c.data.questions[t].approvals.value=!0,c.data.questions[t].approvals.text="YES!",c.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,c.data.questions[t].classes.approvalDiv["round-button-circle-approved"]=!0,c.data.questions[t].classes.inputDiv["has-success"]=!0,r())},e.photoAdded=function(){var n=u.Photo;i(),t.info(c.inputs.Photo),c.data.questions[n].approvals.addressed=!0,c.data.questions[n].approvals.value=!0,c.data.questions[n].classes.inputDiv["has-success"]=!0,r(),e.$apply()},c.submitForm=function(){if(r()==l){var s={};Object.keys(c.inputs).forEach(function(e){"Photo"!==e?"number"==typeof c.inputs[e].value?s[e]=100*c.inputs[e].value:s[e]=c.inputs[e].value:s[e]=c.inputs[e]}),a.submitFormData(s).then(function(a){t.info("submitted!",a),n.path("/success"),e.$apply()})["catch"](function(e){t.info("Error:",e)})}else console.log("need to finish the fields")},c.refreshApprovals()}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","$location","backendSrvc"],n}function backendSrvc(e,t){function n(e){return new Promise(function(n,a){t({method:"GET",url:"assets/"+e}).then(function(e){n(e.data)},function(e){console.log("Error:",e)})})}function a(n){return e.info("got this in _post",n),new Promise(function(e,a){var s=t.post("forms/marketReciept",n).then(function(t){e("success")},function(t){e("error")});console.log(s)})}function s(e){var t=this;t.allForms={marketReceipt:"marketReceipt.json"};var n=t.allForms[e];return new Promise(function(a,s){"undefined"!=typeof t[e]?a(t[e]):t._get(n).then(function(n){t[e]=n,a(t[e])})})}function o(){var e=this;e.allForms={marketReceipt:"marketReceipt.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var n=e.allForms[t];e._get(n).then(function(n){e[t]=n.data})})}function r(t){var n=this;return e.info("got this",t),new Promise(function(e,a){n._post(t).then(function(t){e(t)})["catch"](function(e){a(e)})})}var i={_get:n,_post:a,getFormData:s,loadAllForms:o,submitFormData:r};return i}function landingController(e,t){var n=this;n.redirectTo=function(n){e.info("clicked",n),t.path("/"+n)}}function marketReceiptController(e,t,n){var a=this;a.data=n}function successController(e){e.info("success controller")}function navbar(){function e(e,t,n,a){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],n}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReceipt",["ngRoute"]),angular.module("marketReceipt").config(config),angular.module("marketReceipt").directive("recieptForm",recieptForm),angular.module("marketReceipt").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReceipt").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReceipt").controller("marketReceiptController",marketReceiptController),marketReceiptController.$inject=["$log","backendSrvc","formData"],angular.module("marketReceipt").controller("successController",successController),successController.$inject=["$log"],angular.module("marketReceipt").directive("navbar",navbar);
//# sourceMappingURL=data:application/json;base64,
