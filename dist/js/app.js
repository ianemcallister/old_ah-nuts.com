function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReciept",{templateUrl:"app/marketReciept/marketReciept.htm",controller:"marketRecieptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReciept")}]}}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function backendSrvc(e,t){function n(e){return new Promise(function(n,o){t({method:"GET",url:"assets/"+e}).then(function(e){n(e.data)},function(e){console.log("Error:",e)})})}function o(){}function a(e){var t=this;t.allForms={marketReciept:"marketReciept.json"};var n=t.allForms[e];return new Promise(function(o,a){"undefined"!=typeof t[e]?o(t[e]):t._get(n).then(function(n){t[e]=n,o(t[e])})})}function r(){var e=this;e.allForms={marketReciept:"marketReciept.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var n=e.allForms[t];e._get(n).then(function(n){e[t]=n.data})})}var i={_get:n,_post:o,getFormData:a,loadAllForms:r};return i}function recieptForm(){function e(e,t,n,o){}function t(e,t){function n(){var e=0;return Object.keys(o.data.questions).forEach(function(t){var n=o.data.questions[t].approvals.addressed;n&&e++}),e}var o=this,a=0,r={};o.currentDate=new Date,o.inputs={},o.approvals={},Object.keys(o.data.questions).forEach(function(e){var t=o.data.questions[e].name;o.approvals[t]={addressed:!1,value:null,text:"OK?"},o.inputs[t]={},o.inputs[t].value="",o.inputs[t].suggestion="415",r[t]=a,a++}),t.info(o.inputs),o.inputs.Market.suggestion="Surf City",o.inputs.Name.suggestion="Ahmed",o.inputs.Gross.suggestion=415,o.inputs.Fee.suggestion=42,o.inputs.Pay.suggestion=83,o.inputs.Reciepts.suggestion=10,o.inputs.Bank.suggestion=60,o.inputs.Due.suggestion=220,o.refreshApprovals=function(){Object.keys(o.data.questions).forEach(function(e){o.data.questions[e].approvals.addressed=!1,o.data.questions[e].approvals.value=null,o.data.questions[e].approvals.text="OK?",o.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,o.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,o.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1})},o.approveField=function(e){var n=r[e],a=o.data.questions[n].approvals.addressed;a||(o.data.questions[n].approvals.addressed=!0,o.data.questions[n].approvals.value=!0,o.data.questions[n].approvals.text="YES!",o.data.questions[n].classes.approvalDiv["round-button-circle-free"]=!1,o.data.questions[n].classes.approvalDiv["round-button-circle-approved"]=!0),t.info(e)},o.submitForm=function(){n()==a?console.log("submitted!"):console.log("need to finish the fields")}}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],n}function landingController(e,t){var n=this;n.redirectTo=function(n){e.info("clicked",n),t.path("/"+n)}}function marketRecieptController(e,t,n){var o=this;o.data=n}function navbar(){function e(e,t,n,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var n={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],n}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReciept",["ngRoute"]),angular.module("marketReciept").config(config),angular.module("marketReciept").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReciept").directive("recieptForm",recieptForm),angular.module("marketReciept").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReciept").controller("marketRecieptController",marketRecieptController),marketRecieptController.$inject=["$log","backendSrvc","formData"],angular.module("marketReciept").directive("navbar",navbar);
//# sourceMappingURL=data:application/json;base64,
