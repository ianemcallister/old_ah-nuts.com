function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReceipt",{templateUrl:"app/marketReceipt/marketReceipt.htm",controller:"marketReceiptController",controllerAs:"vm",reloadOnSearch:!0,resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReceipt")}],marketPossibilities:["backendSrvc",function(e){return e.getPossibleMarkets()}],suggestions:["backendSrvc","$routeParams",function(e,t){return e.getSuggestionData(t)}],searchParams:["$routeParams",function(e){return e}]}}).when("/success",{templateUrl:"app/success/success.htm",controller:"successController",controllerAs:"vm"}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function backendSrvc(e,t){function a(e,a){return console.log("dir",e,"filename",a),new Promise(function(n,s){t({method:"GET",url:e+a}).then(function(e){n(e.data)},function(e){console.log("Error:",e)})})}function n(a){return e.info("got this in _post",a),new Promise(function(e,n){var s=t.post("forms/marketReciept",a).then(function(t){e("success")},function(t){e("error")});console.log(s)})}function s(e){var t={},a=e[0],n=e[1],s=e[2],o=e[3];return t.reports_due=[],Object.keys(a).forEach(function(e){t.reports_due.push({name:s[a[e].market].name,employee:o[a[e].scheduled].first_name+" "+o[a[e].scheduled].last_name})}),t.reports_past_due=[],Object.keys(n).forEach(function(e){t.reports_past_due.push({name:s[n[e].market].name,employee:o[n[e].scheduled].first_name+" "+o[n[e].scheduled].last_name,dueDate:e.slice(4,6)+"/"+e.slice(6,8)+"/"+e.slice(2,4)})}),t}function o(e){return"test"}function r(){return"test"}function c(){var e=this;e.allForms={marketReceipt:"marketReceipt.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var a=e.allForms[t];e._get("assets/",a).then(function(a){e[t]=a.data})})}function i(e){return console.log("got these",e),{Market:"Surf City",Name:"Ahmed",Gross:415,Fee:42,Pay:83,Reciepts:10,Bank:60,Due:220}}function l(t){var a=this;return e.info("got this",t),new Promise(function(e,n){a._post(t).then(function(t){e(t)})["catch"](function(e){n(e)})})}var u={_get:a,_post:n,_buildPossibleMarkets:s,getFormData:o,getPossibleMarkets:r,loadAllForms:c,getSuggestionData:i,submitFormData:l};return u}function recieptForm(){function e(e,t,a,n){}function t(e,t,a,n){function s(){i.submitBtnClasses["btn-danger"]=!1,i.submitBtnClasses["btn-success"]=!0}function o(){i.submitBtnClasses["btn-danger"]=!0,i.submitBtnClasses["btn-success"]=!1}function r(){var e=0;return Object.keys(i.data.questions).forEach(function(t){var a=i.data.questions[t].approvals.addressed;a&&e++}),e==l?s():o(),e}function c(){var e=document.getElementById("recieptImage"),t=document.getElementById("Photo").files[0],a=new FileReader,n=null;a.addEventListener("load",function(){n=a.result,e.src=n},!1),t&&(a.readAsDataURL(t),i.inputs.Photo={src:"Market_Reciept.jpg",binary:n})}var i=this,l=0,u={};i.currentDate=new Date,i.inputs={},i.approvals={},i.submitBtnClasses={btn:!0,"btn-danger":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"col-lg-12":!0},Object.keys(i.data.questions).forEach(function(e){var t=i.data.questions[e].name;u[t]=l,l++}),i.inputs=i.suggestions,i.refreshApprovals=function(){Object.keys(i.data.questions).forEach(function(e){var t=i.data.questions[e].name;i.inputs[t].value="",i.data.questions[e].approvals.addressed=!1,i.data.questions[e].approvals.value=null,i.data.questions[e].approvals.text="OK?",i.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,i.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,i.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1,i.data.questions[e].classes.inputDiv["has-success"]=!1,i.data.questions[e].classes.inputDiv["has-warning"]=!1,i.data.questions[e].classes.inputDiv["has-danger"]=!1}),r()},i.changed=function(e){var t=u[e];i.data.questions[t].approvals.addressed=!0,i.data.questions[t].approvals.value=!0,i.data.questions[t].approvals.text="NO!",i.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,i.data.questions[t].classes.approvalDiv["round-button-circle-revised"]=!0,i.data.questions[t].classes.inputDiv["has-danger"]=!0,r()},i.approveField=function(e){var t=u[e],a=i.data.questions[t].approvals.addressed;a||(i.inputs[e].value=i.inputs[e].suggestion,i.data.questions[t].approvals.addressed=!0,i.data.questions[t].approvals.value=!0,i.data.questions[t].approvals.text="YES!",i.data.questions[t].classes.approvalDiv["round-button-circle-free"]=!1,i.data.questions[t].classes.approvalDiv["round-button-circle-approved"]=!0,i.data.questions[t].classes.inputDiv["has-success"]=!0,r())},e.photoAdded=function(){var a=u.Photo;c(),t.info(i.inputs.Photo),i.data.questions[a].approvals.addressed=!0,i.data.questions[a].approvals.value=!0,i.data.questions[a].classes.inputDiv["has-success"]=!0,r(),e.$apply()},i.submitForm=function(){if(r()==l){var s={};Object.keys(i.inputs).forEach(function(e){"Photo"!==e?"number"==typeof i.inputs[e].value?s[e]=100*i.inputs[e].value:s[e]=i.inputs[e].value:s[e]=i.inputs[e]}),n.submitFormData(s).then(function(n){t.info("submitted!",n),a.path("/success"),e.$apply()})["catch"](function(e){t.info("Error:",e)})}else console.log("need to finish the fields")},i.refreshApprovals()}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"=",suggestions:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","$location","backendSrvc"],a}function marketReceiptController(e,t,a,n,s,o){var r=this;e.info("in the marketReceiptController"),r.data=a,r.possibleMarkets=n,r.suggestions=s,e.info("searchParams",o,Object.keys(o).length),e.info("suggestions",s),0==Object.keys(o).length?r.showForm=!1:r.showForm=!0}function landingController(e,t){var a=this;a.redirectTo=function(a){e.info("clicked",a),t.path("/"+a)}}function navbar(){function e(e,t,a,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}function selectPrefilledForm(){function e(e,t,a,n){}function t(e,t,a){function n(e){return{path:"/marketReceipt",params:{date:"20160627",start:"1700",zip:"00000",loc:"01"}}}var s=this;s.selectOption=function(e){var t=s.data[e],o=n(t);console.log(o),a.path(o.path).search(o.params)}}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/selectForm/selectForm.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","$location"],a}function successController(e){e.info("success controller")}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReceipt",["ngRoute"]),angular.module("marketReceipt").config(config),angular.module("marketReceipt").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReceipt").directive("recieptForm",recieptForm),angular.module("marketReceipt").controller("marketReceiptController",marketReceiptController),marketReceiptController.$inject=["$log","backendSrvc","formData","marketPossibilities","suggestions","searchParams"],angular.module("marketReceipt").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReceipt").directive("navbar",navbar),angular.module("marketReceipt").directive("selectPrefilledForm",selectPrefilledForm),angular.module("marketReceipt").controller("successController",successController),successController.$inject=["$log"];
//# sourceMappingURL=data:application/json;base64,
