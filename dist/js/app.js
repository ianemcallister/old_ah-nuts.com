function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReciept",{templateUrl:"app/marketReciept/marketReciept.htm",controller:"marketRecieptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReciept")}]}}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function recieptForm(){function e(e,t,r,n){}function t(e,t){var r=this;r.currentDate=new Date}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function backendSrvc(e,t){function r(e){return new Promise(function(r,n){t({method:"GET",url:"assets/"+e}).then(function(e){r(e.data)},function(e){console.log("Error:",e)})})}function n(){}function o(e){var t=this;t.allForms={marketReciept:"marketReciept.json"};var r=t.allForms[e];return new Promise(function(n,o){"undefined"!=typeof t[e]?n(t[e]):t._get(r).then(function(r){t[e]=r,n(t[e])})})}function a(){var e=this;e.allForms={marketReciept:"marketReciept.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var r=e.allForms[t];e._get(r).then(function(r){e[t]=r.data})})}var l={_get:r,_post:n,getFormData:o,loadAllForms:a};return l}function landingController(e,t){var r=this;r.redirectTo=function(r){e.info("clicked",r),t.path("/"+r)}}function marketRecieptController(e,t,r){var n=this;n.data=r}function navbar(){function e(e,t,r,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReciept",["ngRoute"]),angular.module("marketReciept").config(config),angular.module("marketReciept").directive("recieptForm",recieptForm),angular.module("marketReciept").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReciept").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReciept").controller("marketRecieptController",marketRecieptController),marketRecieptController.$inject=["$log","backendSrvc","formData"],angular.module("marketReciept").directive("navbar",navbar);
//# sourceMappingURL=data:application/json;base64,
