function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReciept",{templateUrl:"app/marketReciept/marketReciept.htm",controller:"marketRecieptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReciept")}]}}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function backendSrvc(e,t){function a(e){return new Promise(function(a,n){t({method:"GET",url:"assets/"+e}).then(function(e){a(e.data)},function(e){console.log("Error:",e)})})}function n(){}function o(e){var t=this;t.allForms={marketReciept:"marketReciept.json"};var a=t.allForms[e];return new Promise(function(n,o){"undefined"!=typeof t[e]?n(t[e]):t._get(a).then(function(a){t[e]=a,n(t[e])})})}function r(){var e=this;e.allForms={marketReciept:"marketReciept.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var a=e.allForms[t];e._get(a).then(function(a){e[t]=a.data})})}var s={_get:a,_post:n,getFormData:o,loadAllForms:r};return s}function recieptForm(){function e(e,t,a,n){}function t(e,t){function a(){var e=0;return Object.keys(n.data.questions).forEach(function(t){var a=n.data.questions[t].approvals.addressed;a&&e++}),e}var n=this,o=0,r={};n.currentDate=new Date,n.inputs={},n.approvals={},Object.keys(n.data.questions).forEach(function(e){var t=n.data.questions[e].name;n.approvals[t]={addressed:!1,value:null,text:"OK?"},n.inputs[t]={},n.inputs[t].value="",n.inputs[t].suggestion="415",r[t]=o,o++}),t.info(n.inputs),n.inputs.Market.suggestion="Surf City",n.inputs.Name.suggestion="Ahmed",n.inputs.Gross.suggestion=415,n.inputs.Fee.suggestion=42,n.inputs.Pay.suggestion=83,n.inputs.Reciepts.suggestion=10,n.inputs.Bank.suggestion=60,n.inputs.Due.suggestion=220,n.refreshApprovals=function(){Object.keys(n.data.questions).forEach(function(e){n.data.questions[e].approvals.addressed=!1,n.data.questions[e].approvals.value=null,n.data.questions[e].approvals.text="OK?",n.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,n.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,n.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1,n.data.questions[e].classes.inputDiv["has-success"]=!1,n.data.questions[e].classes.inputDiv["has-warning"]=!1,n.data.questions[e].classes.inputDiv["has-danger"]=!1})},n.approveField=function(e){var a=r[e],o=n.data.questions[a].approvals.addressed;o||(n.data.questions[a].approvals.addressed=!0,n.data.questions[a].approvals.value=!0,n.data.questions[a].approvals.text="YES!",n.data.questions[a].classes.approvalDiv["round-button-circle-free"]=!1,n.data.questions[a].classes.approvalDiv["round-button-circle-approved"]=!0,n.data.questions[a].classes.inputDiv["has-success"]=!0),t.info(e)},n.submitForm=function(){a()==o?console.log("submitted!"):console.log("need to finish the fields")}}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}function landingController(e,t){var a=this;a.redirectTo=function(a){e.info("clicked",a),t.path("/"+a)}}function marketRecieptController(e,t,a){var n=this;n.data=a}function navbar(){function e(e,t,a,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReciept",["ngRoute"]),angular.module("marketReciept").config(config),angular.module("marketReciept").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReciept").directive("recieptForm",recieptForm),angular.module("marketReciept").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReciept").controller("marketRecieptController",marketRecieptController),marketRecieptController.$inject=["$log","backendSrvc","formData"],angular.module("marketReciept").directive("navbar",navbar);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9yb3V0ZS1jb25maWcuanMiLCJhcHAvYmFja2VuZFNydmMvYmFja2VuZFNydmMuanMiLCJhcHAuanMiLCJhcHAvZm9ybS9mb3JtLmRpcmVjdGl2ZS5qcyIsImFwcC9sYW5kaW5nL2xhbmRpbmcuY29udHJvbGxlci5qcyIsImFwcC9tYXJrZXRSZWNpZXB0L21hcmtldFJlY2llcHQuY29udHJvbGxlci5qcyIsImFwcC9uYXZiYXIvbmF2YmFyLmRpcmVjdGl2ZS5qcyIsImFwcC5tb2R1bGUuanMiXSwibmFtZXMiOlsiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwicmVzb2x2ZSIsImxvYWREYXRhIiwiZm9ybURhdGEiLCJiYWNrZW5kU3J2YyIsImdldEZvcm1EYXRhIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImxvYWRBbGxGb3JtcyIsIiRsb2ciLCIkaHR0cCIsIl9nZXQiLCJmaWxlbmFtZSIsIlByb21pc2UiLCJyZWplY3QiLCJtZXRob2QiLCJ1cmwiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsIl9wb3N0IiwiZm9ybSIsInNlcnZpY2UiLCJ0aGlzIiwiYWxsRm9ybXMiLCJtYXJrZXRSZWNpZXB0IiwicmVqIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJyZWNpZXB0Rm9ybSIsImxpbmtGdW5jIiwic2NvcGUiLCJlbCIsImF0dHIiLCJjdHJsIiwiJHNjb3BlIiwiY291bnRBcHByb3ZlZCIsIm51bWJlck9mIiwidm0iLCJxdWVzdGlvbnMiLCJrZXkiLCJpc0FwcHJvdmVkIiwiYXBwcm92YWxzIiwiYWRkcmVzc2VkIiwidG90YWxGaWVsZHMiLCJmaWVsZHNIYXNoIiwiY3VycmVudERhdGUiLCJEYXRlIiwibmFtZSIsInZhbHVlIiwidGV4dCIsImlucHV0cyIsInN1Z2dlc3Rpb24iLCJpbmZvIiwicmVmcmVzaEFwcHJvdmFscyIsImNsYXNzZXMiLCJhcHByb3ZhbERpdiIsImlucHV0RGl2IiwiYXBwcm92ZUZpZWxkIiwiZmllbGROYW1lIiwicmVjb3JkTnVtIiwic3VibWl0Rm9ybSIsIiRpbmplY3QiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInJlcGxhY2UiLCJsaW5rIiwiYmluZFRvQ29udHJvbGxlciIsImxhbmRpbmdDb250cm9sbGVyIiwiJGxvY2F0aW9uIiwiZm9ybU5hbWUiLCJwYXRoIiwibWFya2V0UmVjaWVwdENvbnRyb2xsZXIiLCJuYXZiYXIiLCJuYXZiYXJDb250cm9sbGVyIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJBQUlBLFFBQUFBLFFBQUFDLEdBQ0FBLEVBQ0FDLEtBQUEsS0FDQUMsWUFBQSwwQkFDQUMsV0FBQSxvQkFDQUMsYUFBQSxLQUNBQyxTQUNBQyxTQUFBQSxZQUdBTCxLQUFBLGtCQUNBQyxZQUFBLHNDQUNBQyxXQUFBLDBCQUNBQyxhQUFBLEtBQ0FDLFNBQ0FFLFVBQUEsY0FBQSxTQUFBQyxHQUVBLE1BQUFBLEdBQUFDLFlBQUEsc0JBSUFDLFdBQ0FDLFdBQUEsTUFJQSxRQUFBTCxVQUFBRSxHQUNBQSxFQUFBSSxlQ3hCQSxRQUFBSixhQUFBSyxFQUFBQyxHQVVBLFFBQUFDLEdBQUFDLEdBR0EsTUFBQSxJQUFBQyxTQUFBLFNBQUFaLEVBQUFhLEdBRUFKLEdBQ0FLLE9BQUEsTUFDQUMsSUFBQSxVQUFBSixJQUNBSyxLQUFBLFNBQUFDLEdBRUFqQixFQUFBaUIsRUFBQUMsT0FFQSxTQUFBRCxHQUNBRSxRQUFBQyxJQUFBLFNBQUFILE9BT0EsUUFBQUksTUFJQSxRQUFBakIsR0FBQWtCLEdBQ0EsR0FBQUMsR0FBQUMsSUFFQUQsR0FBQUUsVUFBQUMsY0FBQSxxQkFFQSxJQUFBWCxHQUFBUSxFQUFBRSxTQUFBSCxFQUVBLE9BQUEsSUFBQVYsU0FBQSxTQUFBWixFQUFBMkIsR0FFQSxtQkFBQUosR0FBQUQsR0FDQXRCLEVBQUF1QixFQUFBRCxJQUVBQyxFQUFBYixLQUFB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c0Usa0JBQUEsRUFjQSxPQVBBTyxHQUFBWixTQUFBLFNBQUEsUUFPQUMsRUozQkF2RSxPQUFPc0UsU0FBVyxrQkFDbEIvRCxTQUFTK0QsU0FBVyxlS0ZwQmEsUUFDQUMsT0FBQSxpQkFDQSxZUEZBRCxRQUNBQyxPQUFBLGlCQUNBcEYsT0FBQUEsUUNGQW1GLFFBQ0FDLE9BQUEsaUJBQ0FDLFFBQUEsY0FBQTVFLGFBRUFBLFlBQUE2RCxTQUFBLE9BQUEsU0VKQWEsUUFDQUMsT0FBQSxpQkFDQWIsVUFBQSxjQUFBbEMsYUNGQThDLFFBQ0FDLE9BQUEsaUJBQ0FoRixXQUFBLG9CQUFBd0UsbUJBRUFBLGtCQUFBTixTQUFBLE9BQUEsYUNKQWEsUUFDQUMsT0FBQSxpQkFDQWhGLFdBQUEsMEJBQUE0RSx5QkFFQUEsd0JBQUFWLFNBQUEsT0FBQSxjQUFBLFlDSkFhLFFBQ0FDLE9BQUEsaUJBQ0FiLFVBQUEsU0FBQVUiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhclxuXHQubW9kdWxlKCdtYXJrZXRSZWNpZXB0Jylcblx0LmNvbmZpZyhjb25maWcpO1xuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHtcblx0JHJvdXRlUHJvdmlkZXJcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvbGFuZGluZy9sYW5kaW5nLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsYW5kaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICAgICAgcmVzb2x2ZToge1x0LyogQG5nSW5qZWN0ICovXG4gICAgICAgIFx0bG9hZERhdGE6bG9hZERhdGFcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLndoZW4oJy9tYXJrZXRSZWNpZXB0Jywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9tYXJrZXRSZWNpZXB0L21hcmtldFJlY2llcHQuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ21hcmtldFJlY2llcHRDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgIFx0Zm9ybURhdGE6IGZ1bmN0aW9uKGJhY2tlbmRTcnZjKSB7XG4gICAgICAgIFx0XHQvL3JldHVybiB7J3Jlc29sdmVUZXN0JzonZ29vZCB0ZXN0J307XG4gICAgICAgIFx0XHRyZXR1cm4gYmFja2VuZFNydmMuZ2V0Rm9ybURhdGEoJ21hcmtldFJlY2llcHQnKTtcbiAgICAgICAgXHR9XG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZERhdGEoYmFja2VuZFNydmMpIHtcblx0YmFja2VuZFNydmMubG9hZEFsbEZvcm1zKCk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuICAgIC5mYWN0b3J5KCdiYWNrZW5kU3J2YycsIGJhY2tlbmRTcnZjKTtcblxuYmFja2VuZFNydmMuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJhY2tlbmRTcnZjKCRsb2csICRodHRwKSB7XG5cdHZhciBzZXJ2aWNlID0gdGhpcztcblxuXHR2YXIgYmFja2VuZFNydmMgPSB7XG5cdFx0X2dldDpfZ2V0LFxuXHRcdF9wb3N0Ol9wb3N0LFxuXHRcdGdldEZvcm1EYXRhOmdldEZvcm1EYXRhLFxuXHRcdGxvYWRBbGxGb3Jtczpsb2FkQWxsRm9ybXNcblx0fTtcblxuXHRmdW5jdGlvbiBfZ2V0KGZpbGVuYW1lKSB7XG5cdFx0dmFyIHRoaXNSZXNwb25zZSA9IG51bGw7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cblx0XHRcdCRodHRwKHtcblx0XHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdFx0dXJsOiAnYXNzZXRzLycgKyBmaWxlbmFtZVxuXHRcdFx0fSkudGhlbihmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socmVzcG9uc2UpIHtcblx0XHRcdFx0XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFxuXHRcdFx0fSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjayhyZXNwb25zZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3I6JyxyZXNwb25zZSk7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBfcG9zdCgpIHtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Rm9ybURhdGEoZm9ybSkge1xuXHRcdHZhciBzZXJ2aWNlID0gdGhpcztcblxuXHRcdHNlcnZpY2UuYWxsRm9ybXMgPSB7XCJtYXJrZXRSZWNpZXB0XCI6J21hcmtldFJlY2llcHQuanNvbid9O1xuXG5cdFx0dmFyIHVybCA9IHNlcnZpY2UuYWxsRm9ybXNbZm9ybV07XG5cdFx0XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlaikge1xuXHRcdFx0Ly9jaGVjayBmb3IgZXhpc3RpbmcgdmFsdWVzXG5cdFx0XHRpZih0eXBlb2Ygc2VydmljZVtmb3JtXSAhPT0gJ3VuZGVmaW5lZCcpXG5cdFx0XHRcdHJlc29sdmUoc2VydmljZVtmb3JtXSk7XG5cdFx0XHRlbHNlIHsgXG5cdFx0XHRcdHNlcnZpY2UuX2dldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0XHRzZXJ2aWNlW2Zvcm1dID0gcmVzcG9uc2U7XG5cdFx0XHRcdFx0cmVzb2x2ZShzZXJ2aWNlW2Zvcm1dKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHR9KTtcblx0XG5cdH1cblxuXHRmdW5jdGlvbiBsb2FkQWxsRm9ybXMoKSB7XG5cdFx0dmFyIHNlcnZpY2UgPSB0aGlzO1xuXG5cdFx0c2VydmljZS5hbGxGb3JtcyA9IHtcIm1hcmtldFJlY2llcHRcIjonbWFya2V0UmVjaWVwdC5qc29uJ307XG5cdFxuXHRcdGNvbnNvbGUubG9nKHNlcnZpY2UuYWxsRm9ybXMpO1xuXG5cdFx0Ly9ydW4gdGhyb3VnaCBlYWNoIGZvcm1cblx0XHRPYmplY3Qua2V5cyhzZXJ2aWNlLmFsbEZvcm1zKS5mb3JFYWNoKGZ1bmN0aW9uKGZvcm0pIHtcblx0XHRcdHZhciB1cmwgPSBzZXJ2aWNlLmFsbEZvcm1zW2Zvcm1dO1xuXG5cdFx0XHRzZXJ2aWNlLl9nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cdFx0XHRcdHNlcnZpY2VbZm9ybV0gPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0fSk7XG5cblx0XHR9KTtcblxuXHR9XG5cblx0cmV0dXJuIGJhY2tlbmRTcnZjO1xufSIsIlxuY29uZmlnLiRpbmplY3QgPSBbXCIkcm91dGVQcm92aWRlclwiXTtcbmxvYWREYXRhLiRpbmplY3QgPSBbXCJiYWNrZW5kU3J2Y1wiXTthbmd1bGFyXG5cdC5tb2R1bGUoJ21hcmtldFJlY2llcHQnLCBbXG5cdFx0J25nUm91dGUnXG5cdF0pO1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuXHQuY29uZmlnKGNvbmZpZyk7XG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmZpZygkcm91dGVQcm92aWRlcikge1xuXHQkcm91dGVQcm92aWRlclxuICAgIC53aGVuKCcvJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9sYW5kaW5nL2xhbmRpbmcuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xhbmRpbmdDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgICAgICByZXNvbHZlOiB7XHQvKiBAbmdJbmplY3QgKi9cbiAgICAgICAgXHRsb2FkRGF0YTpsb2FkRGF0YVxuICAgICAgICB9XG4gICAgfSlcbiAgICAud2hlbignL21hcmtldFJlY2llcHQnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL21hcmtldFJlY2llcHQvbWFya2V0UmVjaWVwdC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbWFya2V0UmVjaWVwdENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgXHRmb3JtRGF0YTogW1wiYmFja2VuZFNydmNcIiwgZnVuY3Rpb24oYmFja2VuZFNydmMpIHtcbiAgICAgICAgXHRcdC8vcmV0dXJuIHsncmVzb2x2ZVRlc3QnOidnb29kIHRlc3QnfTtcbiAgICAgICAgXHRcdHJldHVybiBiYWNrZW5kU3J2Yy5nZXRGb3JtRGF0YSgnbWFya2V0UmVjaWVwdCcpO1xuICAgICAgICBcdH1dXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZERhdGEoYmFja2VuZFNydmMpIHtcblx0YmFja2VuZFNydmMubG9hZEFsbEZvcm1zKCk7XG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnbWFya2V0UmVjaWVwdCcpXG4gICAgLmZhY3RvcnkoJ2JhY2tlbmRTcnZjJywgYmFja2VuZFNydmMpO1xuXG5iYWNrZW5kU3J2Yy4kaW5qZWN0ID0gWyckbG9nJywgJyRodHRwJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYmFja2VuZFNydmMoJGxvZywgJGh0dHApIHtcblx0dmFyIHNlcnZpY2UgPSB0aGlzO1xuXG5cdHZhciBiYWNrZW5kU3J2YyA9IHtcblx0XHRfZ2V0Ol9nZXQsXG5cdFx0X3Bvc3Q6X3Bvc3QsXG5cdFx0Z2V0Rm9ybURhdGE6Z2V0Rm9ybURhdGEsXG5cdFx0bG9hZEFsbEZvcm1zOmxvYWRBbGxGb3Jtc1xuXHR9O1xuXG5cdGZ1bmN0aW9uIF9nZXQoZmlsZW5hbWUpIHtcblx0XHR2YXIgdGhpc1Jlc3BvbnNlID0gbnVsbDtcblxuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0JGh0dHAoe1xuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0XHR1cmw6ICdhc3NldHMvJyArIGZpbGVuYW1lXG5cdFx0XHR9KS50aGVuKGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25zZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XG5cdFx0XHR9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdFcnJvcjonLHJlc3BvbnNlKTtcblx0XHRcdH0pO1xuXG5cdFx0fSk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIF9wb3N0KCkge1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRGb3JtRGF0YShmb3JtKSB7XG5cdFx0dmFyIHNlcnZpY2UgPSB0aGlzO1xuXG5cdFx0c2VydmljZS5hbGxGb3JtcyA9IHtcIm1hcmtldFJlY2llcHRcIjonbWFya2V0UmVjaWVwdC5qc29uJ307XG5cblx0XHR2YXIgdXJsID0gc2VydmljZS5hbGxGb3Jtc1tmb3JtXTtcblx0XHRcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqKSB7XG5cdFx0XHQvL2NoZWNrIGZvciBleGlzdGluZyB2YWx1ZXNcblx0XHRcdGlmKHR5cGVvZiBzZXJ2aWNlW2Zvcm1dICE9PSAndW5kZWZpbmVkJylcblx0XHRcdFx0cmVzb2x2ZShzZXJ2aWNlW2Zvcm1dKTtcblx0XHRcdGVsc2UgeyBcblx0XHRcdFx0c2VydmljZS5fZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXHRcdFx0XHRcdHNlcnZpY2VbZm9ybV0gPSByZXNwb25zZTtcblx0XHRcdFx0XHRyZXNvbHZlKHNlcnZpY2VbZm9ybV0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdH0pO1xuXHRcblx0fVxuXG5cdGZ1bmN0aW9uIGxvYWRBbGxGb3JtcygpIHtcblx0XHR2YXIgc2VydmljZSA9IHRoaXM7XG5cblx0XHRzZXJ2aWNlLmFsbEZvcm1zID0ge1wibWFya2V0UmVjaWVwdFwiOidtYXJrZXRSZWNpZXB0Lmpzb24nfTtcblx0XG5cdFx0Y29uc29sZS5sb2coc2VydmljZS5hbGxGb3Jtcyk7XG5cblx0XHQvL3J1biB0aHJvdWdoIGVhY2ggZm9ybVxuXHRcdE9iamVjdC5rZXlzKHNlcnZpY2UuYWxsRm9ybXMpLmZvckVhY2goZnVuY3Rpb24oZm9ybSkge1xuXHRcdFx0dmFyIHVybCA9IHNlcnZpY2UuYWxsRm9ybXNbZm9ybV07XG5cblx0XHRcdHNlcnZpY2UuX2dldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdFx0c2VydmljZVtmb3JtXSA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHR9KTtcblxuXHRcdH0pO1xuXG5cdH1cblxuXHRyZXR1cm4gYmFja2VuZFNydmM7XG59XG5hbmd1bGFyXG5cdC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuXHQuZGlyZWN0aXZlKCdyZWNpZXB0Rm9ybScsIHJlY2llcHRGb3JtKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiByZWNpZXB0Rm9ybSgpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICdhcHAvZm9ybS9mb3JtLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGRhdGE6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcmVjaWVwdEZvcm0sXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICByZWNpZXB0Rm9ybS4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIFxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHJlY2llcHRGb3JtKCRzY29wZSwgJGxvZykge1xuXHRcdHZhciB2bSA9IHRoaXM7XG5cblx0XHQvL2xvY2FsIHZhcmlhYmxlc1xuXHRcdHZhciB0b3RhbEZpZWxkcyA9IDA7XG5cdFx0dmFyIGZpZWxkc0hhc2ggPSB7fTtcblxuXHRcdC8vc2V0IHZpZXcgbW9kZWwgdmFsdWVzXG5cdFx0dm0uY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuXHRcdHZtWydpbnB1dHMnXSA9IHt9O1xuXHRcdHZtWydhcHByb3ZhbHMnXSA9IHt9O1xuXG5cdFx0Ly9jcmVhdGUgdGhlIG5lZWRlZCBvYmplY3RzXG5cdFx0T2JqZWN0LmtleXModm0uZGF0YS5xdWVzdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHR2YXIgbmFtZSA9IHZtLmRhdGEucXVlc3Rpb25zW2tleV0ubmFtZTtcblxuXHRcdFx0Ly9hZGQgYXBwcm92YWwgdmFsdWVzXG5cdFx0XHR2bS5hcHByb3ZhbHNbbmFtZV0gPSB7XG5cdFx0XHRcdFwiYWRkcmVzc2VkXCI6ZmFsc2UsXG5cdFx0XHRcdFwidmFsdWVcIjpudWxsLFxuXHRcdFx0XHRcInRleHRcIjonT0s/J1xuXHRcdFx0fVxuXG5cdFx0XHQvL2FkZCBpbnB1dCB2YWx1ZXNcblx0XHRcdHZtLmlucHV0c1tuYW1lXSA9IHt9O1xuXHRcdFx0dm0uaW5wdXRzW25hbWVdLnZhbHVlID0gJyc7XG5cdFx0XHR2bS5pbnB1dHNbbmFtZV0uc3VnZ2VzdGlvbiA9ICc0MTUnO1xuXG5cdFx0XHQvL2J1aWxkIGZpZWxkcyBoYXNoXG5cdFx0XHRmaWVsZHNIYXNoW25hbWVdID0gdG90YWxGaWVsZHM7XG5cblx0XHRcdC8vaW5jcmltZW50IGZpZWxkcyBjb3VudFxuXHRcdFx0dG90YWxGaWVsZHMrKztcblxuXHRcdH0pO1xuXG5cdFx0Ly9saXN0IHRoZSBvYmplY3RzXG5cdFx0JGxvZy5pbmZvKHZtLmlucHV0cyk7XG5cblx0XHQvL2FkZCBzdWdnZXN0aW9uIHZhbHVlc1xuXHRcdHZtLmlucHV0c1snTWFya2V0J10uc3VnZ2VzdGlvbiA9ICdTdXJmIENpdHknO1xuXHRcdHZtLmlucHV0c1snTmFtZSddLnN1Z2dlc3Rpb24gPSAnQWhtZWQnO1xuXHRcdHZtLmlucHV0c1snR3Jvc3MnXS5zdWdnZXN0aW9uID0gNDE1O1xuXHRcdHZtLmlucHV0c1snRmVlJ10uc3VnZ2VzdGlvbiA9IDQyO1xuXHRcdHZtLmlucHV0c1snUGF5J10uc3VnZ2VzdGlvbiA9IDgzO1xuXHRcdHZtLmlucHV0c1snUmVjaWVwdHMnXS5zdWdnZXN0aW9uID0gMTA7XG5cdFx0dm0uaW5wdXRzWydCYW5rJ10uc3VnZ2VzdGlvbiA9IDYwO1xuXHRcdHZtLmlucHV0c1snRHVlJ10uc3VnZ2VzdGlvbiA9IDIyMDtcblxuXHRcdGZ1bmN0aW9uIGNvdW50QXBwcm92ZWQoKSB7XG5cdFx0XHR2YXIgbnVtYmVyT2YgPSAwO1xuXG5cdFx0XHRPYmplY3Qua2V5cyh2bS5kYXRhLnF1ZXN0aW9ucykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0Ly9kZWZpbmUgdmFyaWFibGVcblx0XHRcdFx0dmFyIGlzQXBwcm92ZWQgPSB2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmFwcHJvdmFscy5hZGRyZXNzZWQ7XG5cdFx0XHRcdC8vY2hlY2sgdmFsdWVcblx0XHRcdFx0aWYoaXNBcHByb3ZlZCkgbnVtYmVyT2YrKztcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gbnVtYmVyT2Y7XG5cdFx0fVxuXG5cdFx0dm0ucmVmcmVzaEFwcHJvdmFscyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly9sb29wIHRocm91Z2ggYWxsIHF1ZXN0aW9uc1xuXHRcdFx0T2JqZWN0LmtleXModm0uZGF0YS5xdWVzdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cblx0XHRcdFx0Ly9zZXQgdmFsdWVzXG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uYXBwcm92YWxzLmFkZHJlc3NlZCA9IGZhbHNlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmFwcHJvdmFscy52YWx1ZSA9IG51bGw7XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uYXBwcm92YWxzLnRleHQgPSBcIk9LP1wiO1xuXG5cdFx0XHRcdC8vc2V0IGNsYXNzZXNcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNba2V5XS5jbGFzc2VzLmFwcHJvdmFsRGl2Wydyb3VuZC1idXR0b24tY2lyY2xlLWZyZWUnXSA9IHRydWU7XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uY2xhc3Nlcy5hcHByb3ZhbERpdlsncm91bmQtYnV0dG9uLWNpcmNsZS1hcHByb3ZlZCddID0gZmFsc2U7XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uY2xhc3Nlcy5hcHByb3ZhbERpdlsncm91bmQtYnV0dG9uLWNpcmNsZS1yZXZpc2VkJ10gPSBmYWxzZTtcblx0XHRcdFx0XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uY2xhc3Nlcy5pbnB1dERpdlsnaGFzLXN1Y2Nlc3MnXSA9IGZhbHNlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmNsYXNzZXMuaW5wdXREaXZbJ2hhcy13YXJuaW5nJ10gPSBmYWxzZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNba2V5XS5jbGFzc2VzLmlucHV0RGl2WydoYXMtZGFuZ2VyJ10gPSBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZtLmFwcHJvdmVGaWVsZCA9IGZ1bmN0aW9uKGZpZWxkTmFtZSkge1xuXHRcdFx0dmFyIHJlY29yZE51bSA9IGZpZWxkc0hhc2hbZmllbGROYW1lXTtcblx0XHRcdHZhciBpc0FwcHJvdmVkID0gdm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5hcHByb3ZhbHMuYWRkcmVzc2VkO1xuXHRcdFx0XHRcblx0XHRcdGlmKCFpc0FwcHJvdmVkKSB7XG5cblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5hcHByb3ZhbHMuYWRkcmVzc2VkID0gdHJ1ZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5hcHByb3ZhbHMudmFsdWUgPSB0cnVlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1tyZWNvcmROdW1dLmFwcHJvdmFscy50ZXh0ID0gXCJZRVMhXCI7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2NoYW5nZSB0aGUgY2xhc3Ncblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5jbGFzc2VzLmFwcHJvdmFsRGl2Wydyb3VuZC1idXR0b24tY2lyY2xlLWZyZWUnXSA9IGZhbHNlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1tyZWNvcmROdW1dLmNsYXNzZXMuYXBwcm92YWxEaXZbJ3JvdW5kLWJ1dHRvbi1jaXJjbGUtYXBwcm92ZWQnXSA9IHRydWU7XG5cdFx0XHRcdFxuXHRcdFx0XHQvL2NoYW5nZSB0aGUgaW5wdXQgY2xhc3Ncblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5jbGFzc2VzLmlucHV0RGl2WydoYXMtc3VjY2VzcyddID0gdHJ1ZTtcblx0XHRcdFx0XG5cdFx0XHR9XG5cblx0XHRcdCRsb2cuaW5mbyhmaWVsZE5hbWUpO1xuXG5cdFx0fVxuXG5cdFx0dm0uc3VibWl0Rm9ybSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZihjb3VudEFwcHJvdmVkKCkgPT0gdG90YWxGaWVsZHMpXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzdWJtaXR0ZWQhJyk7XG5cdFx0XHRlbHNlIFxuXHRcdFx0XHRjb25zb2xlLmxvZygnbmVlZCB0byBmaW5pc2ggdGhlIGZpZWxkcycpO1xuXG5cdFx0XHRcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZGlyZWN0aXZlO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckbG9jYXRpb24nXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsYW5kaW5nQ29udHJvbGxlcigkbG9nLCAkbG9jYXRpb24pIHtcblx0dmFyIHZtID0gdGhpcztcblxuXHR2bS5yZWRpcmVjdFRvID0gZnVuY3Rpb24oZm9ybU5hbWUpIHtcblx0XHQkbG9nLmluZm8oJ2NsaWNrZWQnLCBmb3JtTmFtZSk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoJy8nK2Zvcm1OYW1lKTtcblx0fVxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuICAgIC5jb250cm9sbGVyKCdtYXJrZXRSZWNpZXB0Q29udHJvbGxlcicsIG1hcmtldFJlY2llcHRDb250cm9sbGVyKTtcblxubWFya2V0UmVjaWVwdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICdiYWNrZW5kU3J2YycsICdmb3JtRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIG1hcmtldFJlY2llcHRDb250cm9sbGVyKCRsb2csIGJhY2tlbmRTcnZjLCBmb3JtRGF0YSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5kYXRhID0gZm9ybURhdGE7XG5cblx0dmFyIHRpdGxlQ2xhc3NlcyA9IHtcblx0XHQnY29sLXhzLTUnOnRydWUsXG5cdFx0J2NvbC1zbS01Jzp0cnVlLFxuXHRcdCdjb2wtbWQtNSc6dHJ1ZSxcblx0XHQnY29sLWxnLTUnOnRydWVcdFx0XG5cdH07XG5cblx0dmFyIGlucHV0Q2xhc3NlcyA9IHtcblx0XHQnY29sLXhzLTcnOnRydWUsXG5cdFx0J2NvbC1zbS03Jzp0cnVlLFxuXHRcdCdjb2wtbWQtNyc6dHJ1ZSxcblx0XHQnY29sLWxnLTcnOnRydWVcblx0fTtcblxufVxuYW5ndWxhclxuXHQubW9kdWxlKCdtYXJrZXRSZWNpZXB0Jylcblx0LmRpcmVjdGl2ZSgnbmF2YmFyJywgbmF2YmFyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBuYXZiYXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAnYXBwL25hdmJhci9uYXZiYXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbmF2YmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIG5hdmJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICBcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBuYXZiYXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuICAgIFx0Ly92YXIgdm0gPSB0aGlzO1xuXHR9XG5cblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCJhbmd1bGFyXG5cdC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuXHQuZGlyZWN0aXZlKCdyZWNpZXB0Rm9ybScsIHJlY2llcHRGb3JtKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiByZWNpZXB0Rm9ybSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAnYXBwL2Zvcm0vZm9ybS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRkYXRhOiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHJlY2llcHRGb3JtLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcmVjaWVwdEZvcm0uJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICBcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiByZWNpZXB0Rm9ybSgkc2NvcGUsICRsb2cpIHtcblx0XHR2YXIgdm0gPSB0aGlzO1xuXG5cdFx0Ly9sb2NhbCB2YXJpYWJsZXNcblx0XHR2YXIgdG90YWxGaWVsZHMgPSAwO1xuXHRcdHZhciBmaWVsZHNIYXNoID0ge307XG5cblx0XHQvL3NldCB2aWV3IG1vZGVsIHZhbHVlc1xuXHRcdHZtLmN1cnJlbnREYXRlID0gbmV3IERhdGUoKTtcblx0XHR2bVsnaW5wdXRzJ10gPSB7fTtcblx0XHR2bVsnYXBwcm92YWxzJ10gPSB7fTtcblxuXHRcdC8vY3JlYXRlIHRoZSBuZWVkZWQgb2JqZWN0c1xuXHRcdE9iamVjdC5rZXlzKHZtLmRhdGEucXVlc3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0dmFyIG5hbWUgPSB2bS5kYXRhLnF1ZXN0aW9uc1trZXldLm5hbWU7XG5cblx0XHRcdC8vYWRkIGFwcHJvdmFsIHZhbHVlc1xuXHRcdFx0dm0uYXBwcm92YWxzW25hbWVdID0ge1xuXHRcdFx0XHRcImFkZHJlc3NlZFwiOmZhbHNlLFxuXHRcdFx0XHRcInZhbHVlXCI6bnVsbCxcblx0XHRcdFx0XCJ0ZXh0XCI6J09LPydcblx0XHRcdH1cblxuXHRcdFx0Ly9hZGQgaW5wdXQgdmFsdWVzXG5cdFx0XHR2bS5pbnB1dHNbbmFtZV0gPSB7fTtcblx0XHRcdHZtLmlucHV0c1tuYW1lXS52YWx1ZSA9ICcnO1xuXHRcdFx0dm0uaW5wdXRzW25hbWVdLnN1Z2dlc3Rpb24gPSAnNDE1JztcblxuXHRcdFx0Ly9idWlsZCBmaWVsZHMgaGFzaFxuXHRcdFx0ZmllbGRzSGFzaFtuYW1lXSA9IHRvdGFsRmllbGRzO1xuXG5cdFx0XHQvL2luY3JpbWVudCBmaWVsZHMgY291bnRcblx0XHRcdHRvdGFsRmllbGRzKys7XG5cblx0XHR9KTtcblxuXHRcdC8vbGlzdCB0aGUgb2JqZWN0c1xuXHRcdCRsb2cuaW5mbyh2bS5pbnB1dHMpO1xuXG5cdFx0Ly9hZGQgc3VnZ2VzdGlvbiB2YWx1ZXNcblx0XHR2bS5pbnB1dHNbJ01hcmtldCddLnN1Z2dlc3Rpb24gPSAnU3VyZiBDaXR5Jztcblx0XHR2bS5pbnB1dHNbJ05hbWUnXS5zdWdnZXN0aW9uID0gJ0FobWVkJztcblx0XHR2bS5pbnB1dHNbJ0dyb3NzJ10uc3VnZ2VzdGlvbiA9IDQxNTtcblx0XHR2bS5pbnB1dHNbJ0ZlZSddLnN1Z2dlc3Rpb24gPSA0Mjtcblx0XHR2bS5pbnB1dHNbJ1BheSddLnN1Z2dlc3Rpb24gPSA4Mztcblx0XHR2bS5pbnB1dHNbJ1JlY2llcHRzJ10uc3VnZ2VzdGlvbiA9IDEwO1xuXHRcdHZtLmlucHV0c1snQmFuayddLnN1Z2dlc3Rpb24gPSA2MDtcblx0XHR2bS5pbnB1dHNbJ0R1ZSddLnN1Z2dlc3Rpb24gPSAyMjA7XG5cblx0XHRmdW5jdGlvbiBjb3VudEFwcHJvdmVkKCkge1xuXHRcdFx0dmFyIG51bWJlck9mID0gMDtcblxuXHRcdFx0T2JqZWN0LmtleXModm0uZGF0YS5xdWVzdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRcdC8vZGVmaW5lIHZhcmlhYmxlXG5cdFx0XHRcdHZhciBpc0FwcHJvdmVkID0gdm0uZGF0YS5xdWVzdGlvbnNba2V5XS5hcHByb3ZhbHMuYWRkcmVzc2VkO1xuXHRcdFx0XHQvL2NoZWNrIHZhbHVlXG5cdFx0XHRcdGlmKGlzQXBwcm92ZWQpIG51bWJlck9mKys7XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIG51bWJlck9mO1xuXHRcdH1cblxuXHRcdHZtLnJlZnJlc2hBcHByb3ZhbHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vbG9vcCB0aHJvdWdoIGFsbCBxdWVzdGlvbnNcblx0XHRcdE9iamVjdC5rZXlzKHZtLmRhdGEucXVlc3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXG5cdFx0XHRcdC8vc2V0IHZhbHVlc1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmFwcHJvdmFscy5hZGRyZXNzZWQgPSBmYWxzZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNba2V5XS5hcHByb3ZhbHMudmFsdWUgPSBudWxsO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmFwcHJvdmFscy50ZXh0ID0gXCJPSz9cIjtcblxuXHRcdFx0XHQvL3NldCBjbGFzc2VzXG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uY2xhc3Nlcy5hcHByb3ZhbERpdlsncm91bmQtYnV0dG9uLWNpcmNsZS1mcmVlJ10gPSB0cnVlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmNsYXNzZXMuYXBwcm92YWxEaXZbJ3JvdW5kLWJ1dHRvbi1jaXJjbGUtYXBwcm92ZWQnXSA9IGZhbHNlO1xuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmNsYXNzZXMuYXBwcm92YWxEaXZbJ3JvdW5kLWJ1dHRvbi1jaXJjbGUtcmV2aXNlZCddID0gZmFsc2U7XG5cdFx0XHRcdFxuXHRcdFx0XHR2bS5kYXRhLnF1ZXN0aW9uc1trZXldLmNsYXNzZXMuaW5wdXREaXZbJ2hhcy1zdWNjZXNzJ10gPSBmYWxzZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNba2V5XS5jbGFzc2VzLmlucHV0RGl2WydoYXMtd2FybmluZyddID0gZmFsc2U7XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW2tleV0uY2xhc3Nlcy5pbnB1dERpdlsnaGFzLWRhbmdlciddID0gZmFsc2U7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2bS5hcHByb3ZlRmllbGQgPSBmdW5jdGlvbihmaWVsZE5hbWUpIHtcblx0XHRcdHZhciByZWNvcmROdW0gPSBmaWVsZHNIYXNoW2ZpZWxkTmFtZV07XG5cdFx0XHR2YXIgaXNBcHByb3ZlZCA9IHZtLmRhdGEucXVlc3Rpb25zW3JlY29yZE51bV0uYXBwcm92YWxzLmFkZHJlc3NlZDtcblx0XHRcdFx0XG5cdFx0XHRpZighaXNBcHByb3ZlZCkge1xuXG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW3JlY29yZE51bV0uYXBwcm92YWxzLmFkZHJlc3NlZCA9IHRydWU7XG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW3JlY29yZE51bV0uYXBwcm92YWxzLnZhbHVlID0gdHJ1ZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5hcHByb3ZhbHMudGV4dCA9IFwiWUVTIVwiO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9jaGFuZ2UgdGhlIGNsYXNzXG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW3JlY29yZE51bV0uY2xhc3Nlcy5hcHByb3ZhbERpdlsncm91bmQtYnV0dG9uLWNpcmNsZS1mcmVlJ10gPSBmYWxzZTtcblx0XHRcdFx0dm0uZGF0YS5xdWVzdGlvbnNbcmVjb3JkTnVtXS5jbGFzc2VzLmFwcHJvdmFsRGl2Wydyb3VuZC1idXR0b24tY2lyY2xlLWFwcHJvdmVkJ10gPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly9jaGFuZ2UgdGhlIGlucHV0IGNsYXNzXG5cdFx0XHRcdHZtLmRhdGEucXVlc3Rpb25zW3JlY29yZE51bV0uY2xhc3Nlcy5pbnB1dERpdlsnaGFzLXN1Y2Nlc3MnXSA9IHRydWU7XG5cdFx0XHRcdFxuXHRcdFx0fVxuXG5cdFx0XHQkbG9nLmluZm8oZmllbGROYW1lKTtcblxuXHRcdH1cblxuXHRcdHZtLnN1Ym1pdEZvcm0gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYoY291bnRBcHByb3ZlZCgpID09IHRvdGFsRmllbGRzKVxuXHRcdFx0XHRjb25zb2xlLmxvZygnc3VibWl0dGVkIScpO1xuXHRcdFx0ZWxzZSBcblx0XHRcdFx0Y29uc29sZS5sb2coJ25lZWQgdG8gZmluaXNoIHRoZSBmaWVsZHMnKTtcblxuXHRcdFx0XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRpcmVjdGl2ZTtcbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnbWFya2V0UmVjaWVwdCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xhbmRpbmdDb250cm9sbGVyJywgbGFuZGluZ0NvbnRyb2xsZXIpO1xuXG5sYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRsb2csICRsb2NhdGlvbikge1xuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdHZtLnJlZGlyZWN0VG8gPSBmdW5jdGlvbihmb3JtTmFtZSkge1xuXHRcdCRsb2cuaW5mbygnY2xpY2tlZCcsIGZvcm1OYW1lKTtcblx0XHQkbG9jYXRpb24ucGF0aCgnLycrZm9ybU5hbWUpO1xuXHR9XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hcmtldFJlY2llcHQnKVxuICAgIC5jb250cm9sbGVyKCdtYXJrZXRSZWNpZXB0Q29udHJvbGxlcicsIG1hcmtldFJlY2llcHRDb250cm9sbGVyKTtcblxubWFya2V0UmVjaWVwdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICdiYWNrZW5kU3J2YycsICdmb3JtRGF0YSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIG1hcmtldFJlY2llcHRDb250cm9sbGVyKCRsb2csIGJhY2tlbmRTcnZjLCBmb3JtRGF0YSkge1xuXHR2YXIgdm0gPSB0aGlzO1xuXHR2bS5kYXRhID0gZm9ybURhdGE7XG5cblx0dmFyIHRpdGxlQ2xhc3NlcyA9IHtcblx0XHQnY29sLXhzLTUnOnRydWUsXG5cdFx0J2NvbC1zbS01Jzp0cnVlLFxuXHRcdCdjb2wtbWQtNSc6dHJ1ZSxcblx0XHQnY29sLWxnLTUnOnRydWVcdFx0XG5cdH07XG5cblx0dmFyIGlucHV0Q2xhc3NlcyA9IHtcblx0XHQnY29sLXhzLTcnOnRydWUsXG5cdFx0J2NvbC1zbS03Jzp0cnVlLFxuXHRcdCdjb2wtbWQtNyc6dHJ1ZSxcblx0XHQnY29sLWxnLTcnOnRydWVcblx0fTtcblxufSIsImFuZ3VsYXJcblx0Lm1vZHVsZSgnbWFya2V0UmVjaWVwdCcpXG5cdC5kaXJlY3RpdmUoJ25hdmJhcicsIG5hdmJhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbmF2YmFyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICdhcHAvbmF2YmFyL25hdmJhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBuYXZiYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgbmF2YmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIFxuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIG5hdmJhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG4gICAgXHQvL3ZhciB2bSA9IHRoaXM7XG5cdH1cblxuXHRyZXR1cm4gZGlyZWN0aXZlO1xufSIsImFuZ3VsYXJcblx0Lm1vZHVsZSgnbWFya2V0UmVjaWVwdCcsIFtcblx0XHQnbmdSb3V0ZSdcblx0XSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
