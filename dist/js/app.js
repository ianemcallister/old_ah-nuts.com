function config(e){e.when("/",{templateUrl:"app/landing/landing.htm",controller:"landingController",controllerAs:"vm",resolve:{loadData:loadData}}).when("/marketReciept",{templateUrl:"app/marketReciept/marketReciept.htm",controller:"marketRecieptController",controllerAs:"vm",resolve:{formData:["backendSrvc",function(e){return e.getFormData("marketReciept")}]}}).otherwise({redirectTo:"/"})}function loadData(e){e.loadAllForms()}function backendSrvc(e,t){function a(e){return new Promise(function(a,n){t({method:"GET",url:"assets/"+e}).then(function(e){a(e.data)},function(e){console.log("Error:",e)})})}function n(){}function o(e){var t=this;t.allForms={marketReciept:"marketReciept.json"};var a=t.allForms[e];return new Promise(function(n,o){"undefined"!=typeof t[e]?n(t[e]):t._get(a).then(function(a){t[e]=a,n(t[e])})})}function s(){var e=this;e.allForms={marketReciept:"marketReciept.json"},console.log(e.allForms),Object.keys(e.allForms).forEach(function(t){var a=e.allForms[t];e._get(a).then(function(a){e[t]=a.data})})}var r={_get:a,_post:n,getFormData:o,loadAllForms:s};return r}function recieptForm(){function e(e,t,a,n){}function t(e,t){function a(){t.info("Unlocking btn"),s.submitBtnClasses["btn-danger"]=!1,s.submitBtnClasses["btn-success"]=!0}function n(){t.info("Locking btn"),s.submitBtnClasses["btn-danger"]=!0,s.submitBtnClasses["btn-success"]=!1}function o(){var e=0;return Object.keys(s.data.questions).forEach(function(t){var a=s.data.questions[t].approvals.addressed;a&&e++}),t.info(e,r,e==r),e==r?a():n(),e}var s=this,r=0,i={};s.currentDate=new Date,s.inputs={},s.approvals={},s.submitBtnClasses={btn:!0,"btn-danger":!0,"btn-success":!1,"col-xs-12":!0,"col-sm-12":!0,"col-md-12":!0,"col-lg-12":!0},Object.keys(s.data.questions).forEach(function(e){var t=s.data.questions[e].name;s.approvals[t]={addressed:!1,value:null,text:"OK?"},s.inputs[t]={},s.inputs[t].value="",s.inputs[t].suggestion="415",i[t]=r,r++}),t.info(s.inputs),s.inputs.Market.suggestion="Surf City",s.inputs.Name.suggestion="Ahmed",s.inputs.Gross.suggestion=415,s.inputs.Fee.suggestion=42,s.inputs.Pay.suggestion=83,s.inputs.Reciepts.suggestion=10,s.inputs.Bank.suggestion=60,s.inputs.Due.suggestion=220,s.refreshApprovals=function(){Object.keys(s.data.questions).forEach(function(e){var t=s.data.questions[e].name;s.inputs[t].value="",s.data.questions[e].approvals.addressed=!1,s.data.questions[e].approvals.value=null,s.data.questions[e].approvals.text="OK?",s.data.questions[e].classes.approvalDiv["round-button-circle-free"]=!0,s.data.questions[e].classes.approvalDiv["round-button-circle-approved"]=!1,s.data.questions[e].classes.approvalDiv["round-button-circle-revised"]=!1,s.data.questions[e].classes.inputDiv["has-success"]=!1,s.data.questions[e].classes.inputDiv["has-warning"]=!1,s.data.questions[e].classes.inputDiv["has-danger"]=!1}),o()},s.changed=function(e){var a=i[e];t.info(e),s.data.questions[a].approvals.addressed=!0,s.data.questions[a].approvals.value=!0,s.data.questions[a].approvals.text="NO!",s.data.questions[a].classes.approvalDiv["round-button-circle-free"]=!1,s.data.questions[a].classes.approvalDiv["round-button-circle-revised"]=!0,s.data.questions[a].classes.inputDiv["has-danger"]=!0,o()},s.approveField=function(e){var a=i[e],n=s.data.questions[a].approvals.addressed;n||(s.inputs[e].value=s.inputs[e].suggestion,s.data.questions[a].approvals.addressed=!0,s.data.questions[a].approvals.value=!0,s.data.questions[a].approvals.text="YES!",s.data.questions[a].classes.approvalDiv["round-button-circle-free"]=!1,s.data.questions[a].classes.approvalDiv["round-button-circle-approved"]=!0,s.data.questions[a].classes.inputDiv["has-success"]=!0,o()),t.info(e)},s.submitForm=function(){o()==r?console.log("submitted!"):console.log("need to finish the fields")}}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/form/form.directive.htm",replace:!0,scope:{data:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}function landingController(e,t){var a=this;a.redirectTo=function(a){e.info("clicked",a),t.path("/"+a)}}function marketRecieptController(e,t,a){var n=this;n.data=a}function navbar(){function e(e,t,a,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var a={restrict:"AECM",templateUrl:"app/navbar/navbar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],a}config.$inject=["$routeProvider"],loadData.$inject=["backendSrvc"],angular.module("marketReciept",["ngRoute"]),angular.module("marketReciept").config(config),angular.module("marketReciept").factory("backendSrvc",backendSrvc),backendSrvc.$inject=["$log","$http"],angular.module("marketReciept").directive("recieptForm",recieptForm),angular.module("marketReciept").controller("landingController",landingController),landingController.$inject=["$log","$location"],angular.module("marketReciept").controller("marketRecieptController",marketRecieptController),marketRecieptController.$inject=["$log","backendSrvc","formData"],angular.module("marketReciept").directive("navbar",navbar);
//# sourceMappingURL=data:application/json;base64,
